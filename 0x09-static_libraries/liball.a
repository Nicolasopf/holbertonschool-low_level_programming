!<arch>
0-isupper.c/    0           0     0     644     225       `
#include "holberton.h"

/**
 * _isupper - checks if is upper letter
 * @c: int for letter
 * Return: 1 if upper, 0 if not
 */


int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

0-memset.c/     0           0     0     644     277       `
#include "holberton.h"

/**
 * _memset - fills memory with a constant byte
 * @s: pointer to n
 * @b: constant byte
 * @n: n bytes to print
 * Return: s
 */

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int a;

	for (a = 0; a < n; a++)
		s[a] = b;
	return (s);
}

0-strcat.c/     0           0     0     644     333       `
#include "holberton.h"

/**
 * _strcat - string concatenate
 * @dest: destination
 * @src: source
 * Return: destination full
 */

char *_strcat(char *dest, char *src)
{
	int i = 0;
	int j = 0;

	while (dest[i] != '\0')
	{
		i++;
	}

	while (src[j] != '\0')
	{
		dest[i] = src[j];
		j++;
		i++;
	}
	dest[i] = '\0';
	return (dest);
}

100-atoi.c/     0           0     0     644     114       `
#include "holberton.h"

/**
 * _atoi - reset int 98
 * @s: int to reset
 * Return: 0
 */

int _atoi(char *s)
{

}
1-isdigit.c/    0           0     0     644     235       `
#include "holberton.h"

/**
 * _isdigit - check if is a digit
 * @c: int for the digit
 * Return: 1 if a digit from 0 to 9, 0 if not
 */

int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

1-memcpy.c/     0           0     0     644     268       `
#include "holberton.h"

/**
 * _memcpy - copies memory data
 * @dest: destination
 * @src: source
 * @n: bytes
 * Return: dest
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int a;

	for (a = 0; a < n; a++)
		dest[a] = src[a];
	return (dest);
}
1-strncat.c/    0           0     0     644     400       `
#include "holberton.h"

/**
 * _strncat - function
 * @dest: destination
 * @src: source
 * @n: bytes
 * Return: dest
 */


char *_strncat(char *dest, char *src, int n)
{
	int x = 0;
	int y = 0;
	int z = 0;

	while (dest[x] != '\0')
	{
		x++;
	}

	while (src[y] != '\0')
	{
		y++;
	}

	for (; z < n; z++)
	{
		if (z < y)
		{
			dest[x] = src[z];
			x++;
			}
	}

	dest[x] = '\0';
	return (dest);


}
2-strchr.c/     0           0     0     644     296       `
#include "holberton.h"

/**
 * _strchr - locates char in a string
 * @s: string
 * @c: character
 * Return: char or null
 */

char *_strchr(char *s, char c)
{
	int a = 0;
	int b;

	while (s[a] != '\0')
		a++;

	for (b = 0; b <= a; b++)
	{
		if (s[b] == c)
			return (s + b);
	}
	return ('\0');
}
2-strlen.c/     0           0     0     644     186       `
#include "holberton.h"

/**
 * _strlen - length of string
 *@s: char var
 * Return: length of string
 */

int _strlen(char *s)
{
	int i = 0;

	while (s[i] != '\0')
		i++;
	return (i);
}
2-strncpy.c/    0           0     0     644     363       `
#include "holberton.h"

/**
 * _strncpy -string gets copied
 * @dest: string destination
 * @src: source string
 * @n: bytes
 * Return: dest
 */

char *_strncpy(char *dest, char *src, int n)
{
	int i = 0;
	int j;

	while (src[i] != '\0')
		i++;

	for (j = 0; j < n; j++)
	{
		if (j < i)
		{
			dest[j] = src[j];
		}
		else
			dest[j] = '\0';
	}
	return (dest);
}

3-islower.c/    0           0     0     644     208       `
#include "holberton.h"

/**
 * _islower - check lower case
 *
 * @c: character
 *
 * Return: 1 lower case, 0 otherwise
 */

int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
	{
		return (1);
	}
	return (0);
}
3-puts.c/       0           0     0     644     194       `
#include "holberton.h"

/**
 * _puts - put a string
 * @str: array of chars
 */

void _puts(char *str)
{
	int i = 0;

	while (str[i] != '\0')
	{
		_putchar(str[i]);
		i++;
	}
	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     418       `
#include "holberton.h"

/**
 * _strcmp - compares two strings
 * @s1: string to compare
 * @s2: string to compare
 *
 * Return: comparation of strings
 */

int _strcmp(char *s1, char *s2)
{
	int i = 0;
	int j, cmp;

	while (s1[i] != '\0')
		i++;
	for (j = 0; j < i; j++)
	{
		if (s1[j] == '\0' && s2[j] == '\0')
			return (0);
		if (s1[j] != s2[j] || s2[j] == '\0')
			break;
	}
	cmp = s1[j] - s2[j];
	return (cmp);
}
3-strspn.c/     0           0     0     644     406       `
#include "holberton.h"
/**
 * _strspn - prints buffer in hexa
 * @s: the address of memory to print
 * @accept: the size of the memory to print
 * Return: s.
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int a;
	int j, i;

	a = 0;

	for (i = 0; s[i] != '\0' && s[i] != ' '; i++)
	{

		for (j = 0; accept[j] != '\0'; j++)
		{
			if (s[i] == accept[j])
			{
				a++;
			}
		}
	}
	return (a);
}
4-isalpha.c/    0           0     0     644     261       `
#include "holberton.h"

/**
 * _isalpha - return 1 if there are letters
 *
 * @c: alphabet lower and upper
 *
 * Return: 1 if letter, 0 if not
 */

int _isalpha(int c)
{

	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
	{
		return (1);
	}
	return (0);
}

4-strpbrk.c/    0           0     0     644     336       `
#include "holberton.h"

/**
 * *_strpbrk - main function.
 * @s: the address of memory to print
 * @accept: the size of the memory to print
 * Return: s.
 */

char *_strpbrk(char *s, char *accept)
{
	int a;

	while (*s)
	{
		for (a = 0; accept[a]; a++)
		{
			if (accept[a] == *s)
			{
				return (s);
			}
		}
		s++;
	}
	return (0);
}
5-strstr.c/     0           0     0     644     433       `
#include "holberton.h"

/**
 * *_strstr - locates a substring
 * @haystack: string
 * @needle: substring
 * Return: string or null
 */

char *_strstr(char *haystack, char *needle)
{
	char *c, *a;

	while (*haystack != '\0')
	{
		c = haystack;
		a = needle;

		while (*a == *haystack && *a != '\0'
		       && *haystack != '\0')
		{
			haystack++;
			a++;
		}
		if (*a == '\0')
			return (c);
		haystack = c + 1;
	}
	return ('\0');
}

6-abs.c/        0           0     0     644     185       `
#include "holberton.h"

/**
 *_abs - convert into absolute
 *@j: var
 *Return: absolute value
 */

int _abs(int j)
{
	if (j < 0)
	{
		j = j * -1;
		return (j);
	}
	else
		return (j);
}

9-strcpy.c/     0           0     0     644     262       `
#include "holberton.h"

/**
 * _strcpy - copy the string
 * @dest: destination
 * @src: source initial
 * Return: dest
 */

char *_strcpy(char *dest, char *src)
{

	int i;

	for (i = 0; src[i]; i++)
	{
		dest[i] = src[i];
	}
	dest[i] = src[i];
	return (dest);
}
main.c/         0           0     0     644     147       `
#include "holberton.h"

int main(void)
{
	_puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
	return (0);
}

_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

